FORMAT: 1A
HOST: https://localhost:3000/api/

# Sam Pastoriza's Blog API

## Features
* Manage user sessions (Login, Logout, Register)
* Retrieve article/s
* Create and Update articles by valid users

## Users [/user/:username]

### Get a user [GET]

Get information about a particular user

+ Request (application/json)

    + Parameters

        + username (string, required) - The username of a particular user

+ Response 200 (application/json)

        {
            "data": {
                "hash": "hksdjfhlaksdjhflkashjdflaufh97r98732749",
                "salt": "fdjkjshdalfhgsdljfgla4y38y98u9uf9uaukzjh",
                "email": "email@email.com",
                "name": "John Doe",
                "username": "doejd",
                "posts": [],
                "joinedDate": "2017-06-20T13:17:27.213Z",
                "profilePicture": "http://profile.picture.com",
                "refreshToken": "239jfdj.;sofaj8;lfkj.lskdjflkhsjh82"
            }
        }

### Update a User [POST]

Updates a user's profile picture

+ Request (multipart/form-data)

    + Headers

            Authorization: Bearer __JWT__

    + Parameters

        + username (string, required) - The username of a particular user

    + Body

            {
                "profilePicture": "file"
            }


+ Response 200 (application/json)
    
        {
            "data": {
                "_id": "84293874938749723947",
                "hash": "hksdjfhlaksdjhflkashjdflaufh97r98732749",
                "salt": "fdjkjshdalfhgsdljfgla4y38y98u9uf9uaukzjh",
                "email": "email@email.com",
                "name": "John Doe",
                "username": "doejd",
                "__v": 0,
                "posts": [],
                "joinedDate": "2017-06-20T13:17:27.213Z",
                "profilePicture": "http://profile.picture.com",
                "refreshToken": "239jfdj.;sofaj8;lfkj.lskdjflkhsjh82"
            }
        }

### Update a User [PUT]

Updates a new user with the provided data

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

    + Parameters

        + username (string, required) - The username of a particular user

    + Body

            {
                "email": "email@email.com",
                "name": "John Doe",
                "username": "doejd",
            }


+ Response 200 (application/json)
    
        {
            "data": {
                "_id": "84293874938749723947",
                "hash": "hksdjfhlaksdjhflkashjdflaufh97r98732749",
                "salt": "fdjkjshdalfhgsdljfgla4y38y98u9uf9uaukzjh",
                "email": "email@email.com",
                "name": "John Doe",
                "username": "doejd",
                "__v": 0,
                "posts": [],
                "joinedDate": "2017-06-20T13:17:27.213Z",
                "profilePicture": "http://profile.picture.com",
                "refreshToken": "239jfdj.;sofaj8;lfkj.lskdjflkhsjh82"
            }
        }

### Delete a User [DELETE]

Delete a user from the system

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

    + Parameters

        + username (string, required) - The username of a particular user


+ Response 200 (application/json)
    
        {
            data: `The user with the username doejd was removed`
        }

## Register [/register]

### Register a user [POST]

Register a particular user given the information provided. Assuming the username is not already taken and the user is successfully registered, the api will return a JWT.

+ Request (application/json)

    + Body

            {
                username: "doejd",
                password: "newpassword"
                name: "John Doe",
                email: "email@email.com",
            }

+ Response 200 (application/json)

        {
            token: "fjsljo;iawejlkjafsljifju9827kkj"
        }

## Login [/login]

### Login a user [GET]

Allows a user to login. The Authorization header must contain the username and password combined with a colon. It will return a JWT.

+ Request (application/json)

    + Headers

            Authorization: username:password

+ Response 200 (application/json)

        {
            token: "fjsljo;iawejlkjafsljifju9827kkj"
        }


## Articles [/blog]

### Get all articles [GET]

Get all articles that exist

+ Response 200 (application/json)

        {
            "data": [
                {
                    "_id": 0,
                    "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                    "title": "Hello world version 2",
                    "description": "This is another test",
                    "author": "doejd",
                    "__v": 0,
                    "tags": [],
                    "datePosted": "2017-06-20T13:30:13.408Z"
                }
            ]
        }

### Create new article [POST]

Create a new article with the given information

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

    + Body

            {
                title: "A new title",
                description: "A new description",
                text: "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                author: "doejd"
            }


+ Response 200 (application/json)
    
        {
            "data": {
                "_id": 0,
                "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                "title": "Hello world version 2",
                "description": "This is another test",
                "author": "doejd",
                "__v": 0,
                "tags": [],
                "datePosted": "2017-06-20T13:30:13.408Z"
            }
        }

## Article [/blog/:id]

### Get an article [GET]

Get a single article

+ Request (application/json)

    + Parameters

        + id (number, required) - The id of a particlar article


+ Response 200 (application/json)

        {
            "data": {
                "_id": 0,
                "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                "title": "Hello world version 2",
                "description": "This is another test",
                "author": "doejd",
                "__v": 0,
                "tags": [],
                "datePosted": "2017-06-20T13:30:13.408Z"
            }
        }

### Update an article [PUT]

Update an article with the given information

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

    + Parameters

        + id (number, required) - The id of a particlar article

    + Body

            {
                title: "A new title",
                description: "A new description",
                text: "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                author: "doejd"
            }


+ Response 200 (application/json)

        {
            "data": {
                "_id": 0,
                "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                "title": "Hello world version 2",
                "description": "This is another test",
                "author": "doejd",
                "__v": 0,
                "tags": [],
                "datePosted": "2017-06-20T13:30:13.408Z"
            }
        }

### Delete an article [DELETE]

Delete an article

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

    + Parameters

        + id (number, required) - The id of a particlar article

    + Body

            {
                title: "A new title",
                description: "A new description",
                text: "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                author: "doejd"
            }


+ Response 200 (application/json)

        {
            "data": {
                "_id": 0,
                "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                "title": "Hello world version 2",
                "description": "This is another test",
                "author": "doejd",
                "__v": 0,
                "tags": [],
                "datePosted": "2017-06-20T13:30:13.408Z"
            }
        }

## Article Tags [/tag/:tag]

### Get article by tag [GET]

Get articles by a tag

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

    + Parameters

        + tag (string, required) - A tag associated with a set of articles


+ Response 200 (application/json)

        {
            "data": [
                {
                    "_id": 0,
                    "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                    "title": "Hello world version 2",
                    "description": "This is another test",
                    "author": "doejd",
                    "__v": 0,
                    "tags": [],
                    "datePosted": "2017-06-20T13:30:13.408Z"
                }
            ]
        }

## User's Articles [/article/:username]

### Get article by username [GET]

Get articles by username

+ Request (application/json)

    + Parameters

        + username (string, required) - A set of articles associated with a user


+ Response 200 (application/json)

        {
            "data": [
                {
                    "_id": 0,
                    "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                    "title": "Hello world version 2",
                    "description": "This is another test",
                    "author": "doejd",
                    "__v": 0,
                    "tags": [],
                    "datePosted": "2017-06-20T13:30:13.408Z"
                }
            ]
        }