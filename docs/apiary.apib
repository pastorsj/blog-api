FORMAT: 1A
HOST: https://localhost:3000/api/

# Sam Pastoriza's Blog API

## Features
* Manage user sessions (Login, Logout, Register)
* Retrieve article/s
* Create and Update articles by valid users

## Users [/user/:username]

### Get a user [GET]

Get information about a particular user

+ Request (application/json)

    + Parameters

        + username (string, required) - The username of a particular user

+ Response 200 (application/json)

        {
            "data": {
                "hash": "hksdjfhlaksdjhflkashjdflaufh97r98732749",
                "salt": "fdjkjshdalfhgsdljfgla4y38y98u9uf9uaukzjh",
                "email": "email@email.com",
                "name": "John Doe",
                "username": "doejd",
                "posts": [],
                "joinedDate": "2017-06-20T13:17:27.213Z",
                "profilePicture": "http://profile.picture.com",
                "refreshToken": "239jfdj.;sofaj8;lfkj.lskdjflkhsjh82"
            }
        }

### Update a User's Profile Picture [POST]

Updates a user's profile picture

+ Request (multipart/form-data; boundary=---BOUNDARY)

        -----BOUNDARY
        Authorization: Bearer __JWT__
        Content-Disposition: form-data; name="image[file]"; filename="image.jpg"
        Content-Type: image/jpeg
        Content-Transfer-Encoding: base64

        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
        HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAABAAEDASIA
        AhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAf/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFAEB
        AAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AL+AD//Z
        -----BOUNDARY
        
+ Response 200 (application/json)
    
        {
            "data": {
                "_id": "84293874938749723947",
                "hash": "hksdjfhlaksdjhflkashjdflaufh97r98732749",
                "salt": "fdjkjshdalfhgsdljfgla4y38y98u9uf9uaukzjh",
                "email": "email@email.com",
                "name": "John Doe",
                "username": "doejd",
                "__v": 0,
                "posts": [],
                "joinedDate": "2017-06-20T13:17:27.213Z",
                "profilePicture": "http://profile.picture.com",
                "refreshToken": "239jfdj.;sofaj8;lfkj.lskdjflkhsjh82"
            }
        }

### Update a User [PUT]

Updates a new user with the provided data

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

    + Parameters

        + username (string, required) - The username of a particular user

    + Body

            {
                "email": "email@email.com",
                "name": "John Doe",
                "username": "doejd",
            }


+ Response 200 (application/json)
    
        {
            "data": {
                "_id": "84293874938749723947",
                "hash": "hksdjfhlaksdjhflkashjdflaufh97r98732749",
                "salt": "fdjkjshdalfhgsdljfgla4y38y98u9uf9uaukzjh",
                "email": "email@email.com",
                "name": "John Doe",
                "username": "doejd",
                "__v": 0,
                "posts": [],
                "joinedDate": "2017-06-20T13:17:27.213Z",
                "profilePicture": "http://profile.picture.com",
                "refreshToken": "239jfdj.;sofaj8;lfkj.lskdjflkhsjh82"
            }
        }

### Delete a User [DELETE]

Delete a user from the system

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

    + Parameters

        + username (string, required) - The username of a particular user


+ Response 200 (application/json)
    
        {
            data: `The user with the username doejd was removed`
        }

## Register [/register]

### Register a user [POST]

Register a particular user given the information provided. Assuming the username is not already taken and the user is successfully registered, the api will return a JWT.

+ Request (application/json)

    + Body

            {
                username: "doejd",
                password: "newpassword"
                name: "John Doe",
                email: "email@email.com",
            }

+ Response 200 (application/json)

        {
            access_token: "fjsljo;iawejlkjafsljifju9827kkj",
            refresh_token: "falsdjfkhasdlkfjhalskdhffh2h893hf",
            expires_in: 12798,
            token_type: "Bearer"
        }

## Login [/login]

### Login a user [GET]

Allows a user to login. The Authorization header must contain the username and password combined with a colon. It will return a JWT.

+ Request (application/json)

    + Headers

            Authorization: {username}:{password}

+ Response 200 (application/json)

        {
            access_token: "fjsljo;iawejlkjafsljifju9827kkj",
            refresh_token: "falsdjfkhasdlkfjhalskdhffh2h893hf",
            expires_in: 12798,
            token_type: "Bearer"
        }


## Articles [/blog]

### Get all articles [GET]

Get all articles that are published

+ Response 200 (application/json)

        {
            "data": [
                {
                    "_id": 0,
                    "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                    "title": "Hello world version 2",
                    "description": "This is another test",
                    "author": "doejd",
                    "tags": [],
                    "datePosted": "2017-06-20T13:30:13.408Z",
                    "coverPhoto": "https://profile.picture.com",
                    "isPublished": true
                }
            ]
        }

### Create new article [POST]

Create a new article with the given information

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

    + Body

            {
                title: "A new title",
                description: "A new description",
                text: "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                author: "doejd"
            }


+ Response 200 (application/json)
    
        {
            "data": {
                "_id": 0,
                "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                "title": "Hello world version 2",
                "description": "This is another test",
                "author": "doejd",
                "tags": [],
                "datePosted": "2017-06-20T13:30:13.408Z",
                "coverPhoto": "https://profile.picture.com",
                "isPublished": true
            }
        }

## Article [/blog/:id]

### Get an article [GET]

Get a single article

+ Request (application/json)

    + Parameters

        + id (number, required) - The id of a particlar article


+ Response 200 (application/json)

        {
            "data": {
                "_id": 0,
                "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                "title": "Hello world version 2",
                "description": "This is another test",
                "author": "doejd",
                "tags": [],
                "datePosted": "2017-06-20T13:30:13.408Z",
                "coverPhoto": "https://profile.picture.com",
                "isPublished": true
            }
        }

### Update an article [PUT]

Update an article with the given information

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

    + Parameters

        + id (number, required) - The id of a particlar article

    + Body

            {
                title: "A new title",
                description: "A new description",
                text: "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                author: "doejd"
            }


+ Response 200 (application/json)

        {
            "data": {
                "_id": 0,
                "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                "title": "Hello world version 2",
                "description": "This is another test",
                "author": "doejd",
                "tags": [],
                "datePosted": "2017-06-20T13:30:13.408Z",
                "coverPhoto": "https://profile.picture.com",
                "isPublished": false
            }
        }

### Update an article's cover photo [POST]

Update an article's cover photo


+ Request (multipart/form-data; boundary=---BOUNDARY)

        -----BOUNDARY
        Authorization: Bearer __JWT__
        Content-Disposition: form-data; name="image[file]"; filename="image.jpg"
        Content-Type: image/jpeg
        Content-Transfer-Encoding: base64

        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
        HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAABAAEDASIA
        AhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAf/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFAEB
        AAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AL+AD//Z
        -----BOUNDARY
        
+ Response 200 (application/json)
    
        {
            "data": {
                "_id": 0,
                "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                "title": "Hello world version 2",
                "description": "This is another test",
                "author": "doejd",
                "tags": [],
                "datePosted": "2017-06-20T13:30:13.408Z",
                "coverPhoto": "https://profile.picture.com",
                "isPublished": false
            }
        }

### Delete an article [DELETE]

Delete an article

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

    + Parameters

        + id (number, required) - The id of a particlar article


+ Response 200 (application/json)

        {
            "message": "The blog with the id 0 was removed"
        }

## Article Tags [/blog/tag/:tag]

### Get article by tag [GET]

Get articles that are published by a tag

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

    + Parameters

        + tag (string, required) - A tag associated with a set of articles


+ Response 200 (application/json)

        {
            "data": [
                {
                    "_id": 0,
                    "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                    "title": "Hello world version 2",
                    "description": "This is another test",
                    "author": "doejd",
                    "tags": [],
                    "datePosted": "2017-06-20T13:30:13.408Z",
                    "coverPhoto": "https://profile.picture.com",
                    "isPublished": true
                }
            ]
        }

## Article Titles [/blog/title/:title]

### Get article by title [GET]

Get articles that are published by a title

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

    + Parameters

        + title (string, required) - A title associated with at least one article


+ Response 200 (application/json)

        {
            "data": [
                {
                    "_id": 0,
                    "title": "Hello world version 2",
                    "tags": ["first", "second"]
                },
                {
                    "_id": 1,
                    "title": "Hello world version 3",
                    "tags": ["first", "third", "databases"]
                }
            ]
        }

## User's Articles [/article/:username]

### Get article by username [GET]

Get articles by username (both published and unpublished)

+ Request (application/json)

    + Parameters

        + username (string, required) - A set of articles associated with a user


+ Response 200 (application/json)

        {
            "data": [
                {
                    "_id": 0,
                    "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                    "title": "Hello world version 2",
                    "description": "This is another test",
                    "author": "doejd",
                    "tags": [],
                    "datePosted": "2017-06-20T13:30:13.408Z",
                    "coverPhoto": "https://profile.picture.com",
                    "isPublished": true
                },
                {
                    "_id": 1,
                    "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                    "title": "Hello world version 3",
                    "description": "This is another test 2",
                    "author": "doejd",
                    "tags": [],
                    "datePosted": "2017-06-20T13:30:13.408Z",
                    "coverPhoto": "https://profile.picture.com",
                    "isPublished": false
                }
            ]
        }

## Gist Conversion [/gist]

### Get converted html given url [GET]

Convert a gist or github url to a minified well formatted html string.

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

    + Body

            {
                link: "https://github.com/pastorsj/blog-api/blob/master/README.md"
            }

+ Response 200 (application/json)

        {
            "data": {
                "html": "<p>Html plus stylesheet</p>",
                "file": "<p>Just the html</p>",
                "stylesheet": "<p>Just the stylesheet html</p>"
            }
        }

## JWT [/jwt]

### Check Expiration [POST]

Check if a jwt is expired

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

+ Response 401 (application/json)

        {
            "message": "JWT is expired"
        }

## Tags [/tags]

### Create a Tag [POST]

Adds a new tag if it does not exist already

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

    + Body

            {
                tag: "database"
            }

+ Response 204

### Get Prefixes [PUT]

Given a prefix of a tag, get all tags that match that prefix, up to a certain count.

+ Request (application/json)

    + Headers

            Authorization: Bearer __JWT__

    + Body

            {
                prefix: "data",
                count: 50
            }

+ Response 200 (application/json)

        {
            "data": ["databases", "data migration"]
        }

### Get Tags by Popularity [GET]

Get all tags by the number of published articles that use that tag.

+ Request (application/json)

+ Response 200 (application/json)

        {
            "data": {
                "databases" 2,
                "data migration": 3
            }
        }

## Article by Tag [/tags/:tag]

### Get Articles by Tag [PUT]

Get all published with a specific tag.

+ Request (application/json)

    + Body

            {
                tag: "databases"
            }

+ Response 200 (application/json)

        {
            "data": [
                {
                    "_id": 0,
                    "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                    "title": "Hello world version 2",
                    "description": "This is another test",
                    "author": "doejd",
                    "tags": ["databases", "redis"],
                    "datePosted": "2017-06-20T13:30:13.408Z",
                    "coverPhoto": "https://profile.picture.com",
                    "isPublished": true
                },
                {
                    "_id": 1,
                    "text": "<p>Welcome to my first article on the basics of programming. I am really enjoying my time working on this project, which will soon be linked on github</p><p><strong>Hello this is my first article.....</strong></p>",
                    "title": "Hello world version 3",
                    "description": "This is another test 2",
                    "author": "doejd",
                    "tags": ["mssql", "databases"],
                    "datePosted": "2017-06-20T13:30:13.408Z",
                    "coverPhoto": "https://profile.picture.com",
                    "isPublished": true
                }
            ]
        }